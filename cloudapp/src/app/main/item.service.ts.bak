import { Injectable } from '@angular/core';
import { CloudAppRestService, HttpMethod, RestErrorResponse } from '@exlibris/exl-cloudapp-angular-lib';
import { of } from 'rxjs';
import { catchError, switchMap } from 'rxjs/operators';
import { CloudAppEventsService, AlertService, CloudAppConfigService, EntityType} from '@exlibris/exl-cloudapp-angular-lib';
import { TranslateService } from '@ngx-translate/core';
@Injectable({
  providedIn: 'root'
})
export class ItemService {

  almaCourse: any;
  almaCourseId: any;
  readingLists: any;
  running = false;
  readingList: any;
  readingListObj: any;
  mms_id: any;
  readingListId: any;
  selectedReadingList: any;
  singleList: boolean;
  citation: any;
  almaResult: any;
  original: any;
  almaReadingList: any;

  constructor(
    private restService: CloudAppRestService,
    private alert: AlertService,
    private translate: TranslateService

  ) { }

  processUser(item: any) {


    let url= `/courses?code~${item.course_code}`;

    //let mms_id = item.mms_id;
    this.almaCourseLookup(item.course_code);
    //this.readingListLookup(this.almaCourseId)

    let readingListUrl = `/courses/${this.almaCourseId}/reading-lists`;
    return this.restService.call(readingListUrl).pipe(
      catchError(e=>{
          throw(e);
        }
      ),
      switchMap(original=>{
        if (original==null) {
          return this.restService.call({
            url: '/users',
            method: HttpMethod.POST,
            requestBody: item
          });
        } else {
          console.log(original['link']);
        //   Object.keys(item).forEach(function(key){
        //     if(key.startsWith('barcode_') ){
        //       //change barcodes - has more than 1 column with barcode title
        //       item['barcode'] = item[key] ;
        //       key = 'barcode';
        //     }
        //     console.log(key + ' - ' + item[key]);
        //     if(['mms_id','holding_id','item_pid'].includes(key)){
        //       console.log(key + ' - ' + item[key] + ' - Not Updating ids' );
        //     }
        //     else if(key in original['holding_data']){
        //       if(original['holding_data'][key] && typeof original['holding_data'][key] === "object"){
        //         original['holding_data'][key]['value'] = item[key]
        //       }else{
        //         original['holding_data'][key]=item[key];
        //       }
        //     }else if(key in original['item_data']){
        //       if(original['item_data'][key] && typeof original['item_data'][key] === "object"){
        //         original['item_data'][key]['value'] = item[key]
        //       }else{
        //         original['item_data'][key]=item[key];
        //       }
        //     }else if(key=='due_back_date'){
        //         original['holding_data'][key]=item[key];
        //     }else{
        //       original['item_data'][key]=item[key];
        //     }
        // });
          //url= original['link'] ? original['link'].substring(original['link'].indexOf("/almaws/v1/")+10 ): url;
         // return this.restService.call(`${url}`).subscribe(res => {this.almaCourse = res.course[0];});
         return this.restService.call({
          url: readingListUrl,
          method: HttpMethod.GET,
          // requestBody: original
        })
      }
    }),
    catchError(e=>of(this.handleError(e, item)))
  )
    // let urlReadingList = `/courses/${this.almaCourseId}/reading-lists`;
    // return this.restService.call(url).pipe(
    //   catchError(e=>{
    //       throw(e);
    //     }
    //   )
    // )
    
    // if (this.readingLists.length == 1 || this.readingLists.length == 0){

    //   if (this.readingLists.length == 0){
    //     this.createList()

    //   }

    //  // this.addToList(this.almaCourseId, this.readingLists[0].id)
      
        

    // }

    // else if (this.readingLists.length > 1){
    //   this.alert.error(this.translate.instant('this course has more than one reading list.  Take this out of your flie and resolve manually'));



    // }

    // else if (){

    //   //this.alert.error(this.translate.instant('this course has no reading reading list.  Take this out of your flie and resolve manually'));

      
        
    // }

    //else if (this.readingLists.length == 1)
    // this.almaCourseLookup(item.course_code);
    // this.readingListLookup(this.almaCourse.id);
    // if(this.singleList){
    //   console.log("got in");
    //   this.addToList(this.almaCourse, this.readingList, item.mms_id);
    //   return this.almaResult;
    // }

    // else {return "error"}
    
  //   return this.restService.call(url).pipe(
  //     catchError(e=>{
  //         throw(e);
  //       }
  //     ),
  //     switchMap(original=>{
  //       if (original==null) {
  //         return this.restService.call({
  //           url: '/users',
  //           method: HttpMethod.POST,
  //           requestBody: item
  //         });
  //       } else {
  //         console.log(original['link']);
  //       //   Object.keys(item).forEach(function(key){
  //       //     if(key.startsWith('barcode_') ){
  //       //       //change barcodes - has more than 1 column with barcode title
  //       //       item['barcode'] = item[key] ;
  //       //       key = 'barcode';
  //       //     }
  //       //     console.log(key + ' - ' + item[key]);
  //       //     if(['mms_id','holding_id','item_pid'].includes(key)){
  //       //       console.log(key + ' - ' + item[key] + ' - Not Updating ids' );
  //       //     }
  //       //     else if(key in original['holding_data']){
  //       //       if(original['holding_data'][key] && typeof original['holding_data'][key] === "object"){
  //       //         original['holding_data'][key]['value'] = item[key]
  //       //       }else{
  //       //         original['holding_data'][key]=item[key];
  //       //       }
  //       //     }else if(key in original['item_data']){
  //       //       if(original['item_data'][key] && typeof original['item_data'][key] === "object"){
  //       //         original['item_data'][key]['value'] = item[key]
  //       //       }else{
  //       //         original['item_data'][key]=item[key];
  //       //       }
  //       //     }else if(key=='due_back_date'){
  //       //         original['holding_data'][key]=item[key];
  //       //     }else{
  //       //       original['item_data'][key]=item[key];
  //       //     }
  //       // });
  //         //url= original['link'] ? original['link'].substring(original['link'].indexOf("/almaws/v1/")+10 ): url;
  //        // return this.restService.call(`${url}`).subscribe(res => {this.almaCourse = res.course[0];});
  //        return this.restService.call({
  //         url: url,
  //         method: HttpMethod.GET,
  //         // requestBody: original
  //       })
  //     }
  //   }),
  //   catchError(e=>of(this.handleError(e, item)))
  // )


}


// findReadingList(id: any){

readingListLookup(id) {
	  this.restService.call(`/courses/${id}/reading-lists`).subscribe( res => {
		  this.readingLists = res;
	  }, err => this.alert.error(this.translate.instant('alert.list_error')) );
	  this.running = false;
  }
// }

// findReadingList(courseId: any) {


//   let url= `/courses/${courseId}/reading-lists/`;

//   //this.almaCourseLookup(item.course_code);
//   // this.readingListLookup(this.almaCourse.id);
//   // if(this.singleList){
//   //   console.log("got in");
//   //   this.addToList(this.almaCourse, this.readingList, item.mms_id);
//   //   return this.almaResult;
//   // }

//   // else {return "error"}
  
//   return this.restService.call(url).pipe(
//     catchError(e=>{
//         throw(e);
//       }
//     ),
//     switchMap(original=>{
//       if (original==null) {
//         return this.restService.call({
//           url: '/users',
//           method: HttpMethod.POST,
//           // requestBody: courseId
//         });
//       } else {
//         console.log(original['link']);
//       //   Object.keys(item).forEach(function(key){
//       //     if(key.startsWith('barcode_') ){
//       //       //change barcodes - has more than 1 column with barcode title
//       //       item['barcode'] = item[key] ;
//       //       key = 'barcode';
//       //     }
//       //     console.log(key + ' - ' + item[key]);
//       //     if(['mms_id','holding_id','item_pid'].includes(key)){
//       //       console.log(key + ' - ' + item[key] + ' - Not Updating ids' );
//       //     }
//       //     else if(key in original['holding_data']){
//       //       if(original['holding_data'][key] && typeof original['holding_data'][key] === "object"){
//       //         original['holding_data'][key]['value'] = item[key]
//       //       }else{
//       //         original['holding_data'][key]=item[key];
//       //       }
//       //     }else if(key in original['item_data']){
//       //       if(original['item_data'][key] && typeof original['item_data'][key] === "object"){
//       //         original['item_data'][key]['value'] = item[key]
//       //       }else{
//       //         original['item_data'][key]=item[key];
//       //       }
//       //     }else if(key=='due_back_date'){
//       //         original['holding_data'][key]=item[key];
//       //     }else{
//       //       original['item_data'][key]=item[key];
//       //     }
//       // });
//         //url= original['link'] ? original['link'].substring(original['link'].indexOf("/almaws/v1/")+10 ): url;
//        // return this.restService.call(`${url}`).subscribe(res => {this.almaCourse = res.course[0];});
//        return this.restService.call({
//         url: url,
//         method: HttpMethod.GET,
//         // requestBody: original
//       })
//     }
//   }),
//   catchError(e=>of(this.handleError(e, '2238')))
// )


// }
private handleError(e: RestErrorResponse, item: any) {
const props = '2238';//item.barcode ? item.barcode : ['mms_id', 'holding_id', 'item_pid'].map(p=>item[p]).join(', ');
if (item) {
e.message = e.message + ` (${props})`
}
return e;
}

getReadingList(id: any){
  let url= `/courses/${id}/reading-lists`;

  return this.restService.call(url).pipe(
    catchError(e=>{
        throw(e);
      }
    )
  )


}

  almaCourseLookup(course_code) {
    this.restService.call(`/courses?q=course_code~${course_code}`).subscribe( res => {
        this.almaCourse = res.course[0];
        this.almaCourseId = res.course[0]['id'];

        //this.readingListLookup(this.almaCourse.id);
      }, err => {
        this.alert.error(this.translate.instant('alert.no_alma_course'));
        this.running = false;		  
      }
    );
    }
  
    createList() {
      this.readingListObj = `{
        "code": "${this.almaCourse.code}-${this.almaCourse.section}",
        "name": "${this.almaCourse.code}-${this.almaCourse.section}",
        "due_back_date": "${this.almaCourse.end_date}",
        "status": {
          "value": "ReadyForProcessing"
        },
        "publishingStatus": {
          "value": "DRAFT"
        }
      }`;
      this.restService.call( {
        url: `/courses/${this.almaCourse.id}/reading-lists`,
        method: HttpMethod.POST,
        headers: {"Content-Type": "application/json"},
        requestBody: this.readingListObj
      }).subscribe( res => {
          this.almaReadingList = res;
          //this.almaCourseId =  this.almaReadingList.link.split("/")[4];
          //this.addToList(this.almaReadingList.id, this.almaCourseId);
        }, err => this.alert.error(this.translate.instant('alert.list_create_error')) );
    }

    
    addToList(almaReadingListId, almaCourseId) {
      //Add to reading list in Alma
  
      this.citation = `{
        "status": {
          "value": "Complete"
        },
        "copyrights_status": {
          "value": "NOTREQUIRED"
        },
        "type": {
          "value": "BK"
        },
        "metadata": {
          "mms_id": "${this.mms_id}"
        }
      }`;
      this.restService.call( {
        url: `/courses/${almaCourseId}/reading-lists/${almaReadingListId}/citations`,
        requestBody: this.citation,
        method: HttpMethod.POST,
        headers: {"Content-Type": "application/json"}
        }).subscribe( res => {
          this.almaResult = res;
          this.readingListId = res.
          console.log(this.almaResult);
          this.alert.success(this.translate.instant('alert.added'));
        }, err => this.alert.error(this.translate.instant('alert.added_error')) );
    }
  }

  
//     readingListLookup(id) {
//       this.restService.call(`/courses/${id}/reading-lists`).subscribe( res => {
//         let numberOfLists = res.length;
//         this.singleList = false;
//         //if (res.numberOfLists == 1){
//         //this.readingLists = res[0];
//         //singleList = true;
//        // }

        
//         if (res.length == 1){
//           this.singleList = true;
//           this.readingList = res[0];
//         }
//       }, err => this.alert.error(this.translate.instant('alert.list_error')) );
//       this.running = false;
//     }
  
//     placeOnReserveAndCreateList(aresItemId) {
//       this.running = true;
     
//       //this.createListAndAdd();
//       this.running = false;
//     }
  
//     // placeOnReserve(aresItemId, almaReadingListId) {
//     //   this.running = true;
//     //   // this.routeInAres(aresItemId);
//     //   if (almaReadingListId == 'use_selected_list') {
//     //     this.addToList(this.selectedReadingList, this.almaCourse.id);
//     //   } else {
//     //     this.addToList(almaReadingListId, this.almaCourse.id);
//     //   }
//     //   this.running = false;
//     // }
    
//     // createListAndAdd() {
//     //   this.readingListObj = `{
//     //     "code": "${this.almaCourse.code}-${this.almaCourse.section}",
//     //     "name": "${this.almaCourse.code}-${this.almaCourse.section}",
//     //     "due_back_date": "${this.almaCourse.end_date}",
//     //     "status": {
//     //       "value": "Complete"
//     //     },
//     //     "publishingStatus": {
//     //       "value": "PUBLISHED"
//     //     }
//     //   }`;
//     //   this.restService.call( {
//     //     url: `/courses/${this.almaCourse.id}/reading-lists`,
//     //     method: HttpMethod.POST,
//     //     headers: {"Content-Type": "application/json"},
//     //     requestBody: this.readingListObj
//     //   }).subscribe( res => {
//     //       this.almaReadingList = res;
//     //       this.almaCourseId =  this.almaReadingList.link.split("/")[4];
//     //       this.addToList(this.almaReadingList.id, this.almaCourseId);
//     //     }, err => this.alert.error(this.translate.instant('alert.list_create_error')) );
//     // }
    
//     addToList(almaReadingListId, almaCourseId, mms_id) {
//       //Add to reading list in Alma
  
//       this.citation = `{
//         "status": {
//           "value": "ReadyForProcessing"
//         },
//         "copyrights_status": {
//           "value": "NOTREQUIRED"
//         },
//         "type": {
//           "value": "BK"
//         },
//         "metadata": {
//           "mms_id": ${mms_id}
//         }
//       }`;
//       this.restService.call( {
//         url: `/courses/${almaCourseId}/reading-lists/${almaReadingListId}/citations`,
//         requestBody: this.citation,
//         method: HttpMethod.POST,
//         headers: {"Content-Type": "application/json"}
//         }).subscribe( res => {
//           this.almaResult = res;
//           console.log(this.almaResult);
//           this.alert.success(this.translate.instant('alert.added'));
//         }, err => this.alert.error(this.translate.instant('alert.added_error')) );
//     }
    
//   private handleError(e: RestErrorResponse, item: any) {
//     const props = item.barcode ? item.barcode : ['mms_id', 'holding_id', 'item_pid'].map(p=>item[p]).join(', ');
//     if (item) {
//       e.message = e.message + ` (${props})`
//     }
//     return e;
//   }

  
// }